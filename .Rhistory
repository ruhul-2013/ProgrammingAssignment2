makeCacheMatrix <- function(x = matrix()) { ## define the argument with default mode of "matrix"
inv <- NULL                             ## initialize inv as NULL; will hold value of matrix inverse
set <- function(y) {                    ## define the set function to assign new
x <<- y                             ## value of matrix in parent environment
inv <<- NULL                        ## if there is a new matrix, reset inv to NULL
}
get <- function() x                     ## define the get fucntion - returns value of the matrix argument
setinverse <- function(inverse) inv <<- inverse  ## assigns value of inv in parent environment
getinverse <- function() inv                     ## gets the value of inv where called
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)  ## you need this in order to refer
## to the functions with the $ operator
}
TestMatrix <- matrix(1:4,2,2)
TestMatrix
makeCacheMatrix(TestMatrix)
CacheMatrix <- makeCacheMatrix(TestMatrix)
CacheMatrix$getMatrix()
CacheMatrix$getInverse()
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
CacheMatrix <- makeCacheMatrix(TestMatrix)
CacheMatrix$getMatrix()
CacheMatrix$getInverse()
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
TestMatrix <- matrix(1:4,2,2)
TestMatrix
CacheMatrix <- makeCacheMatrix(TestMatrix)
CacheMatrix$getMatrix()
CacheMatrix$getInverse()
cacheSolve(CacheMatrix)
cacheSolve(CacheMatrix)
CacheMatrix$setInverse()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL          ## initialy inverse Matrix as NULL
set <- function(y){  ## set funtion define
x <<- y
inv <<- NULL
}
get <- function() x  ## get the value of the matrix
setInverse <- function(solveMatrix) inv <<- solveMatrix ## set the value of the invertible matrix
getInverse <- function() inv                           ##get the value of the invertible matrix
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)){        ##if inverse matrix is not NULL
message("getting cached data")  ##Type message: Getting Cached Invertible Matrix
return(inv)       ##return the invertible matrix
}
data <- x$get()     ##get the original Matrix Dat
inv <- solve(data)  ##use solve function to inverse the matrix
x$setInverse(inv)   ##set the invertible matrix
inv                 ##return the invertible matrix
}
Matrix <- matrix(1:4,2,2)
Matrix
CMatrix <- makeCacheMatrix(Matrix)
CMatrix$get()
CMatrix$getInverse()
cacheSolve(CMatrix)
cacheSolve(CMatrix)
Matrix <- matrix(1:9,3,3)
Matrix
CMatrix <- makeCacheMatrix(Matrix)
CMatrix$get()
CMatrix$getInverse()
cacheSolve(CMatrix)
cacheSolve(CMatrix)
Matrix <- matrix(1:4,2,2)
Matrix
CMatrix <- makeCacheMatrix(Matrix)
CMatrix$get()
CMatrix$getInverse()
cacheSolve(CMatrix)
